feld

=============================
=      File description     =
=============================
README - This file
DirectoryProcessor - Contains the main method, prints filtered and sorted file name from a given source
    directory according to a given filter command file.
IterableFilterFile - Iterable class, iterates over FILTER-OREDER blocks in a filter command file.
FileFilterFactor - FileFiler factory class that returns a FileFilter according to a given parameter.
AllFileFilter - Filters all the given files (Accepts all files).
BetweenFileFilter - Filters the given files that their size is between the values the filter was
    initialized with.
ContainsFileFilter - Filters files that their file name contain a string that the filter was
    initialized with.
ExecutableFileFilter - Filters files that are executable/not-executable, depending on the state the filter
    was initialized with.
FileNameFileFilter - Filters files that have the same file name as a string that the filter was
    initialized with.
GreaterThanFileFilter - Filters files that their file sizes is greater than the size the filter was
    initialized with.
HiddenFileFilter - Filters files that are hidden/not-hidden, depending on the state the filter was
    initialized with.
PrefixFileFilter - Filters files that their file name starts with a string the filter was
    initialized with.
SmallerThanFileFilter - Filters files that their size is smaller than than a value the filter was
    initialized with.
SuffixFileFilter - Filters files that their file name ends with a string the filter was
    initialized with.
WritableFileFilter - Filters files that are writable/not-writable, depending on the state the filter was
    initialized with.
FileComparatorFactory - Comparator factory class, that returns a Comparator according to a given parameter.
FileNameComparator - File name comparator.
FileSizeComparator - File size comparator.
FileTypeComparator - File type comparator.
BadFilterFileFormatException - Exception file to throw when an invalid filter file format
    is detected.
BadFilterParameterException - Exception file to throw when a bad parameter is detected in the
    filter file.
BadSubSectionNameException - Exception file to throw when a subsection name is invalid.

=============================
=          Design           =
=============================
The program was designed with modularity in mind. It fits the 4 fundamental requirements
1. Decomposability - The complex process of filtering and ordering was broken down less complex
    sub-problems. And they are all connected by a single class allowing them to be separate and
    work independently, since the file filters and comparators don't depend on the implementation
    of the DirectoryProcessor and the DirectoryProcessor doesn't depend on the internal
    implementation of the file filters and comparators.
2. Composability - Since the file filters and comparators don't depend on the DirectoryProcessor
    implementation they could be used for in other systems that either have a different
    DirectoryProcessor implementation or do completely different things.
3. Understandability - The modular design I used made sure the structure and the code was
    easily understandable by a human. In order to understand the DirectoryProcessor implementation
    it's only needed to understand the general idea of file filter and comparator classes, there's
    no need to know the internal implementation of those classes. The same goes to understanding
    how the file filters and comparators work.
4. Continuity - A small change in the program, like an addition of a new filter or a new comparator
    will lead to minimal changes in other classes, mainly an addition to the appropriate factory
    class and an addition of a constant string in the DirectoryProcessor to denote the new
    filter/comparator.
It was also designed with the Single-Choice principle in mind. The DirectoryProcessor had to
support many file filters and comparator, so file filter factory class and a comparator factory
class were implemented in order to hide the complexity of those classes from the DirectoryProcessor
The factory classes deal with each filter/comparator requirements so that the DirectoryProcessor
doesn't have to. That way a change in a filter/comparator only changes the small block of code
in the appropriate factory file and doesn't affect classes that rely on them.
The factories are use to decouple the creation of objects from the rest of the program.
Also the Strategy design pattern was used in this program. In order to process directories
according to a give filter file that contains different filters and order requirements.
All the filter classes were made interchangeable with each other and the comparator classes
are interchangeable with other comparator classes. That way the DirectoryProcessor doesn't need
to fit itself to the implementation of a individual filter/comparator class.
Also the program has a minimal API that is exposed to the user. All the complex internal processing
is hidden and only the essential methods are available to the user.


=============================
=  Implementation details   =
=============================
DirectoryProcessor - Contains the main method. The main method creates an instance a
    DirectoryProcessor object and initialized it with a source directory and a filter file path.
    When initialized the directory processor validates the validity of the filter file structure
    and throws a BadFilterFileFormatException.
    The processDirectory method is public, when it's called the directory the object was
    initialized with in precessed according to the command in the filter file the object was
    initialized with.
    The processDirectory iterates over an IterableFilterFile object that was generated for the
    filter file, the IterableFilterFile returns a block of FILTER-ORDER string array and it's
    precessed by a method that analyzes the contents of the string array, generates the
    appropriate file filter and comparator and returns an array list of filtered and sorted
    files. The filtered files are put in an ArrayList and it is sorted using the sort method
    with the generated comparator. This was done since Java has a sorting algorithm implemented
    that has the time complexity of less than Nlog(N) (since Java 7) and is far better than
    anything I could write in a few days, even when I know the exact implementation needs of my
    program. Additionally it's sometimes better to use a general sorting algorithm in case the use
    case of the program will change in the future.
    The array list of files returned to the processDirectory method is printed and the next
    block of FILTER-ORDER is iterated over.

    The Collections sort javadoc:
    "Implementation note: This implementation is a stable, adaptive, iterative mergesort that requires
    far fewer than n lg(n) comparisons when the input array is partially sorted, while offering the
    performance of a traditional mergesort when the input array is randomly ordered. If the input array is
    nearly sorted, the implementation requires approximately n comparisons. Temporary storage requirements
    vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered
    input arrays.

    The implementation takes equal advantage of ascending and descending order in its input array, and can
    take advantage of ascending and descending order in different parts of the same input array. It is
    well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting
    array.

    The implementation was adapted from Tim Peters's list sort for Python ( TimSort). It uses techiques from
    Peter McIlroy's "Optimistic Sorting and Information Theoretic Complexity", in Proceedings of the Fourth
    Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, January 1993.

    This implementation dumps the specified list into an array, sorts the array, and iterates over the list
    resetting each element from the corresponding position in the array. This avoids the n2 log(n)
    performance that would result from attempting to sort a linked list in place."

IterableFilterFile - Holds static constants of the subsection names to be used by other classes
    in the package. Implements iterable for use in a for each loop, the iterator method returns
    an iterator that iterates over FILTER-ORDER blocks in the filter file buffered reader the
    class was initialized with. If after a subsection name (FILTER/ORDER) a parameter line
    is missing, then it's place is marked with a null to denote a missing parameter line.
FileFilterFactory - Has a static class that returns a file filter according to the given
    filter command line. Each filter type has its own "if" block that initializes it according
    to the given parameters in the command line. Each filter class implements FileFilter to
    have a common API. If a parameter is invalid in the filter command line an appropriate
    exception in thrown.
FileFilters - implement FileFilter to have a consistent API between all the filters.
FileComparatorFactory - The same as the FileFilterFactory only returns instances of
    file comparators.
FileComparators - Implement Comparator to have a consistent API between all the comparators.
    And for an easy sort with an ArrayList.
ExceptionClasses - New exception classes were written in order to have exception that tell
    more accurately what's the problem.
    BadFilterFileFormatException is thrown when an FILTER or ORDER subsection is missing.
    BadFilterParameterException is thrown when there's an invalid parameter in the filter or
    order command line.
    BadSubSectionNameException is thrown when a subsection has an invalid name.
