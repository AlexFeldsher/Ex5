feld

=============================
=      File description     =
=============================
README - This file
DirectoryProcessor - Contains the main method, prints filtered and sorted file name from a given source
    directory according to a given filter command file.
IterableFilterFile - Iterable class, iterates over FILTER-OREDER blocks in a filter command file.
FileFilterFactor - FileFiler factory class that returns a FileFilter according to a given parameter.
AllFileFilter - Filters all the given files (Accepts all files).
BetweenFileFilter - Filters the given files that their size is between the values the filter was
    initialized with.
ContainsFileFilter - Filters files that their file name contain a string that the filter was
    initialized with.
ExecutableFileFilter - Filters files that are executable/not-executable, depending on the state the filter
    was initialized with.
FileNameFileFilter - Filters files that have the same file name as a string that the filter was
    initialized with.
GreaterThanFileFilter - Filters files that their file sizes is greater than the size the filter was
    initialized with.
HiddenFileFilter - Filters files that are hidden/not-hidden, depending on the state the filter was
    initialized with.
PrefixFileFilter - Filters files that their file name starts with a string the filter was
    initialized with.
SmallerThanFileFilter - Filters files that their size is smaller than than a value the filter was
    initialized with.
SuffixFileFilter - Filters files that their file name ends with a string the filter was
    initialized with.
WritableFileFilter - Filters files that are writable/not-writable, depending on the state the filter was
    initialized with.
FileComparatorFactory - Comparator factory class, that returns a Comparator according to a given parameter.
FileNameComparator - File name comparator.
FileSizeComparator - File size comparator.
FileTypeComparator - File type comparator.
BadFilterFileFormatException - Exception file to throw when an invalid filter file format
    is detected.
BadFilterParameterException - Exception file to throw when a bad parameter is detected in the
    filter file.
BadSubSectionNameException - Exception file to throw when a subsection name is invalid.

=============================
=          Design           =
=============================
The program was designed with modularity in mind. It fits the 4 fundamental requirements
1. Decomposability - The complex process of filtering and ordering was broken down less complex
    sub-problems. And they are all connected by a single class allowing them to be separate and
    work independently, since the file filters and comparators don't depend on the implementation
    of the DirectoryProcessor and the DirectoryProcessor doesn't depend on the internal
    implementation of the file filters and comparators.
2. Composability - Since the file filters and comparators don't depend on the DirectoryProcessor
    implementation they could be used for in other systems that either have a different
    DirectoryProcessor implementation or do completely different things.
3. Understandability - The modular design I used made sure the structure and the code was
    easily understandable by a human. In order to understand the DirectoryProcessor implementation
    it's only needed to understand the general idea of file filter and comparator classes, there's
    no need to know the internal implementation of those classes. The same goes to understanding
    how the file filters and comparators work.
4. Continuity - A small change in the program, like an addition of a new filter or a new comparator
    will lead to minimal changes in other classes, mainly an addition to the appropriate factory
    class and an addition of a constant string in the DirectoryProcessor to denote the new
    filter/comparator.
It was also designed with the Single-Choice principle in mind. The DirectoryProcessor had to
support many file filters and comparator, so file filter factory class and a comparator factory
class were implemented in order to hide the complexity of those classes from the DirectoryProcessor
The factory classes deal with each filter/comparator requirements so that the DirectoryProcessor
doesn't have to. That way a change in a filter/comparator only changes the small block of code
in the appropriate factory file and doesn't affect classes that rely on them.
The factories are use to decouple the creation of objects from the rest of the program.
Also the Strategy design pattern was used in this program. In order to process directories
according to a give filter file that contains different filters and order requirements.
All the filter classes were made interchangeable with each other and the comparator classes
are interchangeable with other comparator classes. That way the DirectoryProcessor doesn't need
to fit itself to the implementation of a individual filter/comparator class.


=============================
=  Implementation details   =
=============================
